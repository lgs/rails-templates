# Out of the box  Clearance  Rails authentication tamplate 
# basically follow the  wiki  installation  guide @ github 
# http://wiki.github.com/thoughtbot/clearance/installation 
#                                                          
# Build the complete skeleton for a  Rails 2.3 application  
# using  Clearance Auth. This generator will automatically  
# build the basics for a  Rails authentication  with email   
# and password.                                            

puts "\nRails 2.3 installed"

# Add to git
git :init
git :add => "."
git :commit => "-m 'Initial commit.'"

puts "\nAdd clearance gem to config/environment.rb"
gem "thoughtbot-clearance",
  :lib => 'clearance',
  :source => 'http://gems.github.com'
 
puts "\nVendor the gem"
rake "gems:install", :sudo => true
rake "gems:unpack"

puts "\nAdd nokogiri but donâ€™t vendor the gem"
puts "due to its native extensions than install normally on your machine"
gem "nokogiri",
  :lib => 'nokogiri',
  :source => 'http://gems.github.com'
rake "gems:install", :sudo => true

puts "\nAdd BDD gems stack which fit very well with Cucumber"
inside ('') do
  "rake rails:template LOCATION=http://github.com/lgs/rails-templates/raw/master/BDD-gems-pack"
end 

# Add to git
git :add => "."
git :commit => "-m 'add BDD gems stack which fit very well with Cucumber'"

puts "\nCreate a development/test/prod database"
dbname   = ask("\nCreate a new MySQL DB named :")
mysqlusr = ask("\nwith user :")
passwd   = ask("\nand password :")
file 'config/database.yml', <<-YAML
development:
  adapter: mysql
  encoding: utf8
  reconnect: false
  database: #{dbname}
  pool: 5
  username: #{mysqlusr}
  password: #{passwd}
  host: localhost
test:
  adapter: mysql
  encoding: utf8
  reconnect: false
  database: #{dbname}_test
  pool: 5
  username: #{mysqlusr}
  password: #{passwd}
  host: localhost
production:
  development
YAML

puts "\nCreate the db before running clearance generator"
rake("db:create:all")

puts "\nRun the BDD generators"
generate('rspec')
generate('clearance')
generate('cucumber')
puts "......... workaround to avoid stopping the rails-template output due to"
puts "overlapping write file between cucumber & clearance_features generators:"
run "sudo rm ./features/support/paths.rb"
generate('clearance_features')

puts "\nNow run the migration"
if yes?("\nCreate and migrate databases now? (yes/no)")
  rake("db:migrate")
end

# Add to git
git :add => "."
git :commit => "-m 'running BDD enviroment + Clearance generators'"

puts "\nDefine a HOST constant in your environment files."
puts "In config/environments/test.rb and config/environments/development.rb"
puts "it can be: HOST = localhost"
environment "\r\n\r\n# clearance\r\nHOST = 'localhost'", :env => 'test'
environment "\r\n\r\n# clearance\r\nHOST = 'localhost'", :env => 'development'
 
puts "\nIn production.rb it must be the actual host your application is deployed to."
puts "The constant is used by mailers to generate URLs in emails." 
puts "In config/environment.rb: DO_NOT_REPLY = donotreply@example.com"
domain = ask("\nWhat domain will this application # under?")
environment "\r\n\r\n# clearance\r\nHOST = \"#{domain}\"", :env => 'production'
append_file 'config/environment.rb', "\r\n\r\n# clearance\r\nDO_NOT_REPLY = 'donotreply@#{domain}'\r\n"

puts "\nDefine root_url in config/routes.rb"
generate :controller, "home", "index"
route "map.root :controller => 'home'"

puts "\nSetup git ignore file"
run %{find . -type d -empty | grep -v "vendor" | grep -v ".git" | grep -v "tmp" | xargs -I xxx touch xxx/.gitignore}
file '.gitignore', <<-END
.DS_Store
log/*.log
tmp/**/*
config/database.yml
db/*.sqlite3
db/schema.rb
doc/**/*
*.swo
*.swp
END

file 'log/.gitignore', <<-GITIGNORE
*.log
GITIGNORE
file 'tmp/.gitignore', <<-GITIGNORE
*
GITIGNORE
file 'vendor/.gitignore', <<-GITIGNORE
*
GITIGNORE

puts "\nAdd to git"
git :add => "."
git :commit => "-a -m 'OOTB-Clearance rails template applied: see http://github.com/lgs/rails-templates/tree/master'"
